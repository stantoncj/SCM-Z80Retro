Port of the excellent SCMonitor from Steve Cousins https://smallcomputercentral.com/

Goals: 
    1. Rework source to be compiled under sjasmplus https://github.com/z00m128/sjasmplus (Documentation here: http://z00m128.github.io/sjasmplus/documentation.html)
        This was originally compiled under Steve's custom development environment Small Computer Workshop: https://smallcomputercentral.com/small-computer-workshop/
        Why? I like a challenge. I'm using a Mac. The code is modular and well layed out.
        The main issue is that Steve is using his own standard for compiler directives that need to be translated to more universal ones
        Ideally this should just be a series of translations that can be applied to a new release of SCMonitor
        Should yield binary equivalent output files

    2. Add hardware support for the Z80 Retro board by Peter Wilson: https://github.com/peterw8102/Z80-Retro
        Why? This board has a wide variety of hardware support (banked ROM/RAM, SIO, CTC, RTC, SPI, i2c) although it isn't as developed as the RC2014 or MGH z80 projects
        Known Challenge is that this has a funky io map for the SIO that doesn't match a known config

Worklog:

Create working fork:
- Downloaded source from https://smallcomputercentral.com/small-computer-monitor-v1-3/
- Created an SCM Github Repository
- Unzip and move the code from SCMonitor directory to SCM
- Check in code

Scope problem:
- Determine all directives used in code
- Wrote awk script to extract all directives in *.asm (see scw2sjasm.sh)
#DEFINE
#ELSE
#ENDIF
#ENDIF
#IF
#IFDEF
#IFNDEF
#INCLUDE
#INSERTHEX
#TARGET
#UNDEFINE

- ToDo: map these directives to sjasmplus equivalents
- Luckly comments (;) are similarly treated 
- OBS! directives are # in column 0 whereas sjasplus expects pseudo operators (start of line whitespace required) and only labels can be in column 0
- Defined awk for all statements that apply and tested
- missing #INSERTHEX (if using ROM BASIC or CPM)
- missing #TARGET (not needed only for SCW)
- check back in

- move to awk file to debug multiline awk
- runs without quotes but only runs first command #DEFINE and doubles up line?  Check what the !\^ statement is?
- corrected awk file to match and alter only lines matched i.e. {print; next;} and default to {print} for all other lines
- tests correctly against !Main.asm (#DEFINE and #INCLUDE)
- cannot get -v debug=Y to work, brute forcing as a comment
- seperated out scw2sjasm.sh to run the recursive awk command
- chmod 755 scw2sjasm.sh 
- shell script runs correctly for debug
- check in code

- pre-reqs: (on OSX 10.15.7 Catalina):
- the default OSX distribution of awk lacks -i INPLACE support (WTF Apple?)
- install brew:
- brew install gawk
- did a brew update (3 hours), why do I do this to myself?  Note to self to remove some old experiments: awscli, mongodb, kubernetes-cli, openjdk, mysql-client, helm, node, kubernetes-cli, etc. audit this!
- got -i infile to work correctly, modified all files in tree

- ran ./scw2sjasm.sh to modify directives in all files
- ran sjasmplus '!Main.asm' to compile, next issue:

API.asm(21): error: Unrecognized instruction: .CODE
FDOS.asm(7): error: Unrecognized instruction: .CODE

- commented this out as there is no equivalent in sjasmplus

next issue:
.DB entries using backslash for "divided by", have to flip the backslash to slash

kaCodeBeg:  .DB  CodeBegin\256  ;0x004E  Start of SCM code (hi byte)

- resolved with awk section to flip backslash to slash

revisited .DATA which was solved in same block as .CODE, may need to revisit this as it seperates ROM code from RAM.

- next issue:
.EQU / .SET - used to set variable values

While .EQU is compilable it is discouraged
Generic_Z50Bus.asm(22): error: Unrecognized instruction: .SET 0x88

kSIO1:  .EQU 0x80             ;Base address of serial Z80 SIO #1
kSIO1:  .SET 0x80             ;Base address of serial Z80 SIO #1

Replace both with =, strip : from label

- Errors: 285, warnings: 758, compiled: 10494 lines, work time: 0.060 seconds

- next issue
.HEXCHAR  {statement}
Converts the statement value to a single ASCII hex character 
i.e. 
.HEXCHAR 0xF outputs the byte 'F'
.HEXCHAR 0x0 outputs the byte '0'
- no equivalent SJASMPLUS command, use LUA script inserted by awk

Substitute in this LUA function:
	LUA ALLPASS
		digit = _c(" kACIABase & 15")
		if (digit<10) then _pc('DB '..48+digit) else _pc('DB '..55+digit) end
	ENDLUA

Errors: 265, warnings: 758, compiled: 10574 lines, work time: 0.061 seconds
Removed 20 errors!

-next issue:
In SCW @Label is treated as a local label
I suspect this operates in the same way as .Label works in sjasmplus

Let's transform in awk and see if it gets remedied
Worked, transform all @ to ., seems this symbol is only use for local labels (maybe)

Errors: 31, warnings: 568, compiled: 10574 lines, work time: 0.050 seconds

Removed 245 errors and 190 warnings!

- next issue:
Begin.asm(11): error: Label not found: Z80
  11++0000              	IF Z80 = "Z80"
  12++0000 ~                        .PROC Z80           ;Select processor for SCWorkshop
  13++0000              	ENDIF

Z80 must be a predefine value, not really useful to us as we are not supporting any alternative Z80 extensions ala Z180
lets just make the IF line always false but keep the compiler happy

next issue:
Truncation of values
Alpha.asm(219): warning: value 0x105 is truncated to 8bit value: 0x05
Alpha.asm(344): warning: value 0x113E8 is truncated to 16bit value: 0x13E8





