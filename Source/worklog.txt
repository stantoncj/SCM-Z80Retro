Port of the excellent SCMonitor from Steve Cousins https://smallcomputercentral.com/

Goals: 
    1. Rework source to be compiled under sjasmplus https://github.com/z00m128/sjasmplus (Documentation here: http://z00m128.github.io/sjasmplus/documentation.html)
        This was originally compiled under Steve's custom development environment Small Computer Workshop: https://smallcomputercentral.com/small-computer-workshop/
        Why? I like a challenge. I'm using a Mac. The code is modular and well layed out.
        The main issue is that Steve is using his own standard for compiler directives that need to be translated to more universal ones
        Ideally this should just be a series of translations that can be applied to a new release of SCMonitor
        Should yield binary equivalent output files

    2. Add hardware support for the Z80 Retro board by Peter Wilson: https://github.com/peterw8102/Z80-Retro
        Why? This board has a wide variety of hardware support (banked ROM/RAM, SIO, CTC, RTC, SPI, i2c) although it isn't as developed as the RC2014 or MGH z80 projects
        Known Challenge is that this has a funky io map for the SIO that doesn't match a known config

Worklog:

Create working fork:
- Downloaded source from https://smallcomputercentral.com/small-computer-monitor-v1-3/
- Created an SCM Github Repository
- Unzip and move the code from SCMonitor directory to SCM
- Check in code

Scope problem:
- Determine all directives used in code
- Wrote awk script to extract all directives in *.asm (see scw2sjasm.sh)
#DEFINE
#ELSE
#ENDIF
#ENDIF
#IF
#IFDEF
#IFNDEF
#INCLUDE
#INSERTHEX
#TARGET
#UNDEFINE

- ToDo: map these directives to sjasmplus equivalents
- Luckly comments (;) are similarly treated 
- OBS! directives are # in column 0 whereas sjasplus expects pseudo operators (start of line whitespace required) and only labels can be in column 0
- Defined awk for all statements that apply and tested
- missing #INSERTHEX (if using ROM BASIC or CPM)
- missing #TARGET (not needed only for SCW)
- check back in

- move to awk file to debug multiline awk
- runs without quotes but only runs first command #DEFINE and doubles up line?  Check what the !\^ statement is?
- corrected awk file to match and alter only lines matched i.e. {print; next;} and default to {print} for all other lines
- tests correctly against !Main.asm (#DEFINE and #INCLUDE)
- cannot get -v debug=Y to work, brute forcing as a comment
- seperated out scw2sjasm.sh to run the recursive awk command
- chmod 755 scw2sjasm.sh 
- shell script runs correctly for debug
- check in code

- pre-reqs: (on OSX 10.15.7 Catalina):
- the default OSX distribution of awk lacks -i INPLACE support (WTF Apple?)
- install brew:
- brew install gawk
- did a brew update (3 hours), why do I do this to myself?  Note to self to remove some old experiments: awscli, mongodb, kubernetes-cli, openjdk, mysql-client, helm, node, kubernetes-cli, etc. audit this!
- got -i infile to work correctly, modified all files in tree

- ran ./scw2sjasm.sh to modify directives in all files
- ran sjasmplus '!Main.asm' to compile, next issue:

API.asm(21): error: Unrecognized instruction: .CODE
FDOS.asm(7): error: Unrecognized instruction: .CODE

- commented this out as there is no equivalent in sjasmplus

next issue:
.DB entries using backslash for "divided by", have to flip the backslash to slash

kaCodeBeg:  .DB  CodeBegin\256  ;0x004E  Start of SCM code (hi byte)

- resolved with awk section to flip backslash to slash

revisited .DATA which was solved in same block as .CODE, may need to revisit this as it seperates ROM code from RAM.

- next issue:
.EQU / .SET - used to set variable values

While .EQU is compilable it is discouraged
Generic_Z50Bus.asm(22): error: Unrecognized instruction: .SET 0x88

kSIO1:  .EQU 0x80             ;Base address of serial Z80 SIO #1
kSIO1:  .SET 0x80             ;Base address of serial Z80 SIO #1

Replace both with =, strip : from label

- Errors: 285, warnings: 758, compiled: 10494 lines, work time: 0.060 seconds

- next issue
.HEXCHAR  {statement}
Converts the statement value to a single ASCII hex character 
i.e. 
.HEXCHAR 0xF outputs the byte 'F'
.HEXCHAR 0x0 outputs the byte '0'
- no equivalent SJASMPLUS command, use LUA script inserted by awk

Substitute in this LUA function:
	LUA ALLPASS
		digit = _c(" kACIABase & 15")
		if (digit<10) then _pc('DB '..48+digit) else _pc('DB '..55+digit) end
	ENDLUA

Errors: 265, warnings: 758, compiled: 10574 lines, work time: 0.061 seconds
Removed 20 errors!

-next issue:
In SCW @Label is treated as a local label
I suspect this operates in the same way as .Label works in sjasmplus

Let's transform in awk and see if it gets remedied
Worked, transform all @ to ., seems this symbol is only use for local labels (maybe)

Errors: 31, warnings: 568, compiled: 10574 lines, work time: 0.050 seconds

Removed 245 errors and 190 warnings!

- next issue:
Begin.asm(11): error: Label not found: Z80
  11++0000              	IF Z80 = "Z80"
  12++0000 ~                        .PROC Z80           ;Select processor for SCWorkshop
  13++0000              	ENDIF

Z80 must be a predefine value, not really useful to us as we are not supporting any alternative Z80 extensions ala Z180
lets just make the IF line always false but keep the compiler happy

Z80 is a substitution from DEFINE+
SCW: IF is not doing a literal substitution, but considering it a string to compare

    DEFINE+ PROCESSOR Z80
    IF PROCESSOR = "Z80"

This gets literaly substituted in so:
    IF Z80 = "Z80"

Modified DEFINE+ to put values in quotes:  
    DEFINE+ PROCESSOR "Z80"

When expanded:
    IF "Z80" = "Z80"

Does not affect IFDEF etc.

Errors: 6, warnings: 547, compiled: 10593 lines, work time: 0.089 seconds

- next problem: #DB is like .DB???
Just substitute # for .

Bug in quoted DEFINE+ for already quoted defines!
Fixed to not double quote quoted DEFINE+S
Fixed to not create null strings

ZERO!  Compiles something which is probably wrong, but compiles!
Errors: 0, warnings: 547, compiled: 10599 lines, work time: 0.060 seconds

- next problem: Monitor is not assembling to fit into the space defined and overflows RAM 

Monitor.asm
Monitor.asm(151): warning: RAM limit exceeded 0x10000 by ORG

Must be size of the defined fields or the math to calculate offsets

Nope.. maybe #DB is a volatile that is relocated to .DATA?

Confirmed from Steve Cousins that this is simply .DB with statement interpretation,
so 
    .DB 0xFF
works, but
    .DB SIO_Set
does not, it needs
    #DB SIO_Set
to interpret the define

- next problem: Monitor is not assembling to fit into the space defined and overflows RAM 

From .lst:
 150++FFFC 65 05
 Monitor.asm(151): warning: RAM limit exceeded 0x10000 by ORG

Lets calculate manually and figure out where it's miscounted
In Monitor.asm: (from .lst)
  43++079C                          .ORG  kMonData      ;Establish workspace/data area
  44++FE80

In Alpha.asm:   
kMonData    .EQU kData + 0x0280

and kData is defined in Config_Standard.asm
; Memory map (data in RAM)
kData:      .EQU 0xFC00         ;Typically 0xFC00 (to 0xFFFF)

So kMonData is calculated at 0xFC00 + 0x0280 = 0xFE80 
THIS IS CORRECT

Suspicious that this exceeds RAM where this exists:
 145++FFAA              szCmdHelp:
 146++FFAA              	IFDEF IncludeHelp
 147++FFAA 4D 6F 6E 69              .DB  "Monitor commands:",kNewLine

 To suss this out, lets comment out the #IncludeHelp in Config_Standard.asm and recompile
This indeed fixes the Monitor.asm overflow problem

Let's come back to that...
kMonData needs to be recalculated if #IncludeHelp is defined
Errors: 0, warnings: 479, compiled: 10564 lines, work time: 0.052 seconds

Removed 68 warnings

Just moved the overflow downstream: into UtilitiesM.asm
 182++FFFE FE 24                    CP   '$'            ;Does string start with '$' ?
UtilitiesM.asm(183): warning: RAM limit exceeded 0x10000 by ORG

AHA:

.CODE and .DATA run different address counters

an .ORG applies locally to .CODE or .DATA seperately?

.DATA
    .ORG 0x1000
    .DB 0xFF    ; at 0x1000
.CODE
    .ORG 0xFF00
    NOP         ; at 0xFF00
.DATA
    .DB 0x88    ; at 0x1001
.CODE
    NOP         ; at 0xFF01

This mirrors zasm #DATA and #CODE


Can we use LUA to simulate this?

Pseudo:

.DATA -> save current code PC, wait for org (or restore the data PC)
.CODE -> restore current code PC
.ORG  -> as long as .DATA and .CODE blocks are used regularly, this should just set the PC 

Holy crap, that worked on the first try!
Errors: 0, warnings: 6, compiled: 10721 lines, work time: 0.049 seconds

Wrote LUA functions to swap back and forth and initialize code_pc and data_pc in initial file (!Main.asm)
TODO: Make this non-hardcoded filename

Warnings with IF statements comparing strings literals longer than 4 bytes
Confirmed that this warning is legit in sjasmplus source, no way to suppress warning (as with some other warnings)
Modified DEFINE to truncate literal strings to 4 characters
Modified IF to truncate literal strings to 4 characters


- Next problem

SCW when compiled, regardless of ORG output is sequential and ORG just affects absolute addresses
OUTPUT as seperate bin files

Inserted OUTPUT after each ORG to change the output file
Binaries look correct
Output looks correct when moved to hex 
Simply cat of binaries together works on first two 0000 and 0311, but is off by one by 044e

Strategy:
Build a combined .HEX files and run them back together to create the assembled .BIN (and then reHEX?)
 
Seems to work, but now need to compare binaries and work through symbolic differences between compilers

Built another awk script assemble.sh, which builds the full bin from the peices
Built a make file

RUNS IN DEBUGGER WITH FULL SYMBOLS AND BREAKPOINTS!

TODO: Move build around so all volotiles are in a build (now Output) directory

- Next Problem - Build is looping because of missing device definitions.

No data at device initialization code: 1BA3 (SIO_n1_std+4)


.CODE AND .DATA do not strictly alternate, need additional logic to record transition:
between .CODE->.CODE, .DATA->.DATA, the .CODE->.DATA and .DATA->.CODE work correctly

Need to track which block we are in

Also fix .INCLUDEHEX to add a variable build file that is included in the final srec_cat link

.DATA / .CODE is fixed and optimized to not generate unnecessary segments (.CODE->.CODE and .DATA->.DATA)

Modified code to use .ORG to also generate a new segment 

Now correctly debugs and runs 

Produces an excess of files and a single FE00 code output stray
Removed this in the link script

Cleaned up shell and make scripts
Moved all build artifacts to ./build including lst,sld,sym

Added README.md, cleaned up code

Implemented INCLUDEHEX 

Now feature complete with SCWorkshop at least what SCMonitor builds

Build compare to test that build is binary equivalent to SCMontor (one can hope)

2nd byte should be cb, it is c3 
Instruction for bootstrap is JMP 1ccb
Found 1cc3 is defined twice

Found the bug:
In original file:

            .ORG szCDate + 9    ;Fixed space allocated for date

Is modified by scm2sjasm to:

  75++1CCE              ;	.ORG - Reset PC for the correct context
  76++1CCE              	LUA ALLPASS
  77++1CCE ~            		if in_code then
  78++1CCE ~            			code_pc = _c("szCName")
  79++1CCE ~            			_pc(".ORG 0x"..string.format("%04X",code_pc))
  80++1CCE ~            			_pc("OUTPUT "..build_dir.."code_output_"..string.format("%04X",code_pc)..".bin")
  81++1CCE ~            		else
  82++1CCE ~            			data_pc = _c("szCName")
  83++1CCE ~            			_pc(".ORG 0x"..string.format("%04X",data_pc))
  84++1CCE ~            			_pc("OUTPUT "..build_dir.."data_output_"..string.format("%04X",data_pc)..".bin")
  85++1CCE ~            		end
  86++1CCE              .ORG 0x1CC3
  86++1CC3              OUTPUT ./build/code_output_1CC3.bin
  86++1CC3              	ENDLUA

  The interpretation does not capture the math (seperated by spaces)

  Fixed to create correct calculated org

  Now should be 0xcb, now is 0xd8 - difference of +0x0d
  This may be accumulated

  0007 should be JMP 0584    it is JMP 0585   1 extra byte by 585
  006E should be JMP 0423    it is JMP 0424   1 extra byte by 424
  00EB should be CALL 1CCE    it is CALL 1CDB 0xD extra byte by 1CCE

  Pattern begins at 0x420
  From the source HEX - Spaces for clarity
  :10 0410 00 08CD23041BAF12189DAF12CD38047B94 76
  :10 0420 00 E1D1C9F5FE0520093E0DCD1BFE28FB3E 9E


  From the built binary
0000410 08 cd 24 04 1b af 12 18 9d af 12 cd 39 04 7b 97
        08 CD 23 04 1B AF 12 18 9D AF 12 CD 38 04 7B ** <-- there it is
0000420 94 e1 d1 c9 f5 fe 05 20 09 3e 0d cd 1b fe 28 fb
        94 E1 D1 C9 F5 FE 05 20 09 3E 0D CD 1B FE 28 FB 
        3E   

 331++041E 7B                       LD   A,E            ;Calculate number of characters
 332++041F 97 94                    SUB  A,H            ;  in input buffer
 333++0421 E1           .Exit:      POP  HL

Compile SUB A,H = 97 94
SCW = SUB A,H = 94

Wrote transform for SUB A,H to SUB H
Corrects a large portion of differences

Next offset is 062f which is B5 B7 instead of B5 
 150++062E B7 B5                    OR   A,L            ;Get result byte

Similar issue OR A,L  is OR L
sjasm compiles as OR A, OR L adding an extra byte

Next offset is 06B7
000006B7 E6 A7

 230++06B6 A7 E6 01                 AND  A,kROMBanks    ;Finished all ROM banks?

 Should ne E6 01

Next offset
 00000B11 3C 3E

This is LD A version - Fixed

Resolved offsets!
This;
0000012B 02 03
Looks like a honest build difference

This:
00002052 40 20

0002040 02 6b 20 7b 20 73 20 89 20 5a 38 30 20 53 49 4f
0002050 20 20 2e 20 38 30 00 db 82 fe 6c c0 db 83 fe 6c
        20 40 20 38 30 00 DB 82 FE 6C C0 DB 83 FE 6C C0
0002060 c0 0e 82 cd cd 20 0e 83 c3 cd 20 db 82 cb 47 c8

:10204000 026A207A20722088205A38302053494F 63
:10205000 204020383000DB82FE6CC0DB83FE6CC0 89
:10206000 0E82CDCC200E83C3CC20DB82CB47C8DB D5

  48++2049 5A 38 30 20  .String:    .DB  "Z80 SIO "
  48++204D 53 49 4F 20
  49++2051 20                       .DB  " "
  50++2052 2E 20                    .DB  ". "

  @String:    .DB  "Z80 SIO "
            #DB  SIO_TYPE
            .DB  "@ "
            .HEXCHAR kSIOBase \ 16
            .HEXCHAR kSIOBase & 15
            .DB  kNull

Bug in transforming @ to . inside quote...secondary
Extra space introduced by #DB SIO_TYPE is related to introducing " " as minimal string value

    #DEFINE     SIO_TYPE ""         ;or "(std) "
	DEFINE+     SIO_TYPE " "        ;or "(std) "

Can we make sure a #DB with a " " value does not emit a space?
Will need to write LUA code as this is evaluated at compile time
So a 
Label:  #DB     " "  ; should emit nothing
should be transformed to 
Label: ; #DB    " "  ; emits nothing, just a bare label

May need to change the "special blank" value

After a few attempts
Just punted and gawked the offending line in SIO.asm out

Current diff:
0000012B 02 03 # This is a version difference after the target .HEX was built
00001CCB FF 00

00001ED1 40 2E
00001FCA 40 2E
00002052 40 2E
00002105 40 2E
00002192 40 2E
000021D9 40 2E
0000221F 40 2E
0000228A 40 2E
000022CF 40 2E
000022FF 40 2E
00002322 40 2E

00002375 FF 00 # Below here are just padding bytes
00002376 FF 00
00002377 FF 00
00002378 FF 00
00002379 FF 00
0000237A FF 00
0000237B FF 00
0000237C FF 00
0000237D FF 00
0000237E FF 00
0000237F FF 00
00002380 FF 00
00004DB9 FF 00
00004DBA FF 00
00004DBB FF 00
00004DBC FF 00
00004DBD FF 00
00004DBE FF 00
00004DBF FF 00
00004DC0 FF 00

00022f0 61 67 6e 6f 73 74 69 63 20 4c 45 44 73 20 2e 20
        61 67 6E 6F 73 74 69 63 20 4C 45 44 73 20 40 20
0002300 41 30 00 0e a0 ed 48 db a0 b9 c9 af c9 00 16 23
0002310 26 23 00 28 23 00 53 74 61 74 75 73 20 4c 45 44
0002320 20 2e 20 30 38 00 af c9 af c9 cd 72 1d 21 41 00

:1022F000 61676E6F73746963204C454473204020 9E
:10230000 4130000EA0ED48DBA0B9C9AFC9001623 CB
:10231000 262300282300537461747573204C4544 B0
:10232000 204020303800AFC9AFC9CD721D214100 17

  30++22EE 44 69 61 67  .String:    .DB  "Diagnostic LEDs "
  30++22F2 6E 6F 73 74
  30++22F6 69 63 20 4C
  30++22FA 45 44 73 20
  31++22FE 2E 20                    .DB  ". "

  The 40->2e transform is because of a swap from a quoted @ to a .

  Need to refine the @ transform

Down to 24 bytes difference

0001ec0 c1 cd c9 1e cd 50 1d 18 c8 c5 d5 e5 06 11 1a fe
0001ed0 2e 28 07 cd 5e 1d 13 10 f5 04 3e 20 cd 5e 1d 10
0001ee0 f9 1a cd 5e 1d 13 1a b7 20 f8 e1 d1 c1 c9 53 75

:101EC000 C1CDC91ECD501D18C8C5D5E506111AFE D5
:101ED000 402807CD5E1D1310F5043E20CD5E1D10 79
:101EE000 F91ACD5E1D131AB720F8E1D1C1C95375 97

This was a single quoted @, fixed in awk

Down to 23 bytes difference, 21 are padding
2 are actual issues
0000012B 02 03 - This is a known minor version increment between the supplied build and the source
00001FCA 40 2E - This is another @ -> . inside a string - BIOS/Framework/Devices/BitBangSerial_SC1.asm Line 45
