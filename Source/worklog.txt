Port of the excellent SCMonitor from Steve Cousins https://smallcomputercentral.com/

Goals: 
    1. Rework source to be compiled under sjasmplus https://github.com/z00m128/sjasmplus (Documentation here: http://z00m128.github.io/sjasmplus/documentation.html)
        This was originally compiled under Steve's custom development environment Small Computer Workshop: https://smallcomputercentral.com/small-computer-workshop/
        Why? I like a challenge. I'm using a Mac. The code is modular and well layed out.
        The main issue is that Steve is using his own standard for compiler directives that need to be translated to more universal ones
        Ideally this should just be a series of translations that can be applied to a new release of SCMonitor
        Should yield binary equivalent output files

    2. Add hardware support for the Z80 Retro board by Peter Wilson: https://github.com/peterw8102/Z80-Retro
        Why? This board has a wide variety of hardware support (banked ROM/RAM, SIO, CTC, RTC, SPI, i2c) although it isn't as developed as the RC2014 or MGH z80 projects
        Known Challenge is that this has a funky io map for the SIO that doesn't match a known config

Worklog:

Create working fork:
- Downloaded source from https://smallcomputercentral.com/small-computer-monitor-v1-3/
- Created an SCM Github Repository
- Unzip and move the code from SCMonitor directory to SCM
- Check in code

Scope problem:
- Determine all directives used in code
- Wrote awk script to extract all directives in *.asm (see scw2sjasm.sh)
#DEFINE
#ELSE
#ENDIF
#ENDIF
#IF
#IFDEF
#IFNDEF
#INCLUDE
#INSERTHEX
#TARGET
#UNDEFINE

- ToDo: map these directives to sjasmplus equivalents
- Luckly comments (;) are similarly treated 
- OBS! directives are # in column 0 whereas sjasplus expects pseudo operators (start of line whitespace required) and only labels can be in column 0
- Defined awk for all statements that apply and tested
- missing #INSERTHEX (if using ROM BASIC or CPM)
- missing #TARGET (not needed only for SCW)
- check back in

- move to awk file to debug multiline awk
- runs without quotes but only runs first command #DEFINE and doubles up line?  Check what the !\^ statement is?
- corrected awk file to match and alter only lines matched i.e. {print; next;} and default to {print} for all other lines
- tests correctly against !Main.asm (#DEFINE and #INCLUDE)
- cannot get -v debug=Y to work, brute forcing as a comment
- seperated out scw2sjasm.sh to run the recursive awk command
- chmod 755 scw2sjasm.sh 
- shell script runs correctly for debug
- check in code

- pre-reqs: (on OSX 10.15.7 Catalina):
- the default OSX distribution of awk lacks -i INPLACE support (WTF Apple?)
- install brew:
- brew install gawk
- did a brew update (3 hours), why do I do this to myself?  Note to self to remove some old experiments: awscli, mongodb, kubernetes-cli, openjdk, mysql-client, helm, node, kubernetes-cli, etc. audit this!
- got -i infile to work correctly, modified all files in tree

- ran ./scw2sjasm.sh to modify directives in all files
- ran sjasmplus '!Main.asm' to compile, next issue:

API.asm(21): error: Unrecognized instruction: .CODE
FDOS.asm(7): error: Unrecognized instruction: .CODE

- commented this out as there is no equivalent in sjasmplus

next issue:
.DB entries using backslash for "divided by", have to flip the backslash to slash

kaCodeBeg:  .DB  CodeBegin\256  ;0x004E  Start of SCM code (hi byte)

- resolved with awk section to flip backslash to slash

revisited .DATA which was solved in same block as .CODE, may need to revisit this as it seperates ROM code from RAM.

- next issue:
.EQU / .SET - used to set variable values

While .EQU is compilable it is discouraged
Generic_Z50Bus.asm(22): error: Unrecognized instruction: .SET 0x88

kSIO1:  .EQU 0x80             ;Base address of serial Z80 SIO #1
kSIO1:  .SET 0x80             ;Base address of serial Z80 SIO #1

Replace both with =, strip : from label

- Errors: 285, warnings: 758, compiled: 10494 lines, work time: 0.060 seconds

- next issue
.HEXCHAR  {statement}
Converts the statement value to a single ASCII hex character 
i.e. 
.HEXCHAR 0xF outputs the byte 'F'
.HEXCHAR 0x0 outputs the byte '0'
- no equivalent SJASMPLUS command, use LUA script inserted by awk

Substitute in this LUA function:
	LUA ALLPASS
		digit = _c(" kACIABase & 15")
		if (digit<10) then _pc('DB '..48+digit) else _pc('DB '..55+digit) end
	ENDLUA

Errors: 265, warnings: 758, compiled: 10574 lines, work time: 0.061 seconds
Removed 20 errors!

-next issue:
In SCW @Label is treated as a local label
I suspect this operates in the same way as .Label works in sjasmplus

Let's transform in awk and see if it gets remedied
Worked, transform all @ to ., seems this symbol is only use for local labels (maybe)

Errors: 31, warnings: 568, compiled: 10574 lines, work time: 0.050 seconds

Removed 245 errors and 190 warnings!

- next issue:
Begin.asm(11): error: Label not found: Z80
  11++0000              	IF Z80 = "Z80"
  12++0000 ~                        .PROC Z80           ;Select processor for SCWorkshop
  13++0000              	ENDIF

Z80 must be a predefine value, not really useful to us as we are not supporting any alternative Z80 extensions ala Z180
lets just make the IF line always false but keep the compiler happy

Z80 is a substitution from DEFINE+
SCW: IF is not doing a literal substitution, but considering it a string to compare

    DEFINE+ PROCESSOR Z80
    IF PROCESSOR = "Z80"

This gets literaly substituted in so:
    IF Z80 = "Z80"

Modified DEFINE+ to put values in quotes:  
    DEFINE+ PROCESSOR "Z80"

When expanded:
    IF "Z80" = "Z80"

Does not affect IFDEF etc.

Errors: 6, warnings: 547, compiled: 10593 lines, work time: 0.089 seconds

- next problem: #DB is like .DB???
Just substitute # for .

Bug in quoted DEFINE+ for already quoted defines!
Fixed to not double quote quoted DEFINE+S
Fixed to not create null strings

ZERO!  Compiles something which is probably wrong, but compiles!
Errors: 0, warnings: 547, compiled: 10599 lines, work time: 0.060 seconds

- next problem: Monitor is not assembling to fit into the space defined and overflows RAM 

Monitor.asm
Monitor.asm(151): warning: RAM limit exceeded 0x10000 by ORG

Must be size of the defined fields or the math to calculate offsets

Nope.. maybe #DB is a volatile that is relocated to .DATA?

Confirmed from Steve Cousins that this is simply .DB with statement interpretation,
so 
    .DB 0xFF
works, but
    .DB SIO_Set
does not, it needs
    #DB SIO_Set
to interpret the define

- next problem: Monitor is not assembling to fit into the space defined and overflows RAM 

From .lst:
 150++FFFC 65 05
 Monitor.asm(151): warning: RAM limit exceeded 0x10000 by ORG

Lets calculate manually and figure out where it's miscounted
In Monitor.asm: (from .lst)
  43++079C                          .ORG  kMonData      ;Establish workspace/data area
  44++FE80

In Alpha.asm:   
kMonData    .EQU kData + 0x0280

and kData is defined in Config_Standard.asm
; Memory map (data in RAM)
kData:      .EQU 0xFC00         ;Typically 0xFC00 (to 0xFFFF)

So kMonData is calculated at 0xFC00 + 0x0280 = 0xFE80 
THIS IS CORRECT

Suspicious that this exceeds RAM where this exists:
 145++FFAA              szCmdHelp:
 146++FFAA              	IFDEF IncludeHelp
 147++FFAA 4D 6F 6E 69              .DB  "Monitor commands:",kNewLine

 To suss this out, lets comment out the #IncludeHelp in Config_Standard.asm and recompile
This indeed fixes the Monitor.asm overflow problem

Let's come back to that...
kMonData needs to be recalculated if #IncludeHelp is defined
Errors: 0, warnings: 479, compiled: 10564 lines, work time: 0.052 seconds

Removed 68 warnings

Just moved the overflow downstream: into UtilitiesM.asm
 182++FFFE FE 24                    CP   '$'            ;Does string start with '$' ?
UtilitiesM.asm(183): warning: RAM limit exceeded 0x10000 by ORG

AHA:

.CODE and .DATA run different address counters

an .ORG applies locally to .CODE or .DATA seperately?

.DATA
    .ORG 0x1000
    .DB 0xFF    ; at 0x1000
.CODE
    .ORG 0xFF00
    NOP         ; at 0xFF00
.DATA
    .DB 0x88    ; at 0x1001
.CODE
    NOP         ; at 0xFF01

This mirrors zasm #DATA and #CODE


Can we use LUA to simulate this?

Pseudo:

.DATA -> save current code PC, wait for org (or restore the data PC)
.CODE -> restore current code PC
.ORG  -> as long as .DATA and .CODE blocks are used regularly, this should just set the PC 

Holy crap, that worked on the first try!
Errors: 0, warnings: 6, compiled: 10721 lines, work time: 0.049 seconds

Wrote LUA functions to swap back and forth and initialize code_pc and data_pc in initial file (!Main.asm)
TODO: Make this non-hardcoded filename

Warnings with IF statements comparing strings literals longer than 4 bytes
Confirmed that this warning is legit in sjasmplus source, no way to suppress warning (as with some other warnings)
Modified DEFINE to truncate literal strings to 4 characters
Modified IF to truncate literal strings to 4 characters


- Next problem

SCW when compiled, regardless of ORG output is sequential and ORG just affects absolute addresses
OUTPUT as seperate bin files

Inserted OUTPUT after each ORG to change the output file
Binaries look correct
Output looks correct when moved to hex 
Simply cat of binaries together works on first two 0000 and 0311, but is off by one by 044e

Strategy:
Build a combined .HEX files and run them back together to create the assembled .BIN (and then reHEX?)
 
Seems to work, but now need to compare binaries and work through symbolic differences between compilers

Built another awk script assemble.sh, which builds the full bin from the peices
Built a make file

RUNS IN DEBUGGER WITH FULL SYMBOLS AND BREAKPOINTS!

TODO: Move build around so all volotiles are in a build (now Output) directory

- Next Problem - Build is looping because of missing device definitions.

No data at device initialization code: 1BA3 (SIO_n1_std+4)


.CODE AND .DATA do not strictly alternate, need additional logic to record transition:
between .CODE->.CODE, .DATA->.DATA, the .CODE->.DATA and .DATA->.CODE work correctly

Need to track which block we are in

Also fix .INCLUDEHEX to add a variable build file that is included in the final srec_cat link

.DATA / .CODE is fixed and optimized to not generate unnecessary segments (.CODE->.CODE and .DATA->.DATA)

Modified code to use .ORG to also generate a new segment 

Now correctly debugs and runs 

Produces an excess of files and a single FE00 code output stray
Removed this in the link script

Cleaned up shell and make scripts

